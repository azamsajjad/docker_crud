npm init -y
npm install express
node index.js
npm install nodemon --save-dev   (to sync folder b/w local and container)

deleting node_modules folder locally also deleted it in the container

so we should provide another volume flag , it will instruct nodemon not to touch that folder

$ docker container run --name node-app -d \
-v ${pwd}:/app -v /app/node_modules -p 3000:3000 node-app-image

---------------------------------------------------------------
docker container run --name node-app -d \
-v ${pwd}:/app -v /app/node_modules \
-e PORT=4000 -p 3000:4000 node-app-image
docker exec -it node-app bash
root@3ef31440b0b0:/app# printenv                                       
HOSTNAME=3ef31440b0b0
YARN_VERSION=1.22.19
PWD=/app
PORT=4000
HOME=/root
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin      
NODE_VERSION=20.9.0
_=/usr/bin/printenv

OR 

PS D:\devops\5-CKA\node-app> docker container run --name node-app -d -v ${pwd}:/app -v /app/node_modules --env-file ./.env -p 3000:4000 node-app-image
9f96adc797bcb7b9c6319b605cc62e9a416cfd1e9de4da4073bb976fd6358625
PS D:\devops\5-CKA\node-app> docker exec -it node-app bash             
root@9f96adc797bc:/app# printenv                                       
HOSTNAME=9f96adc797bc
YARN_VERSION=1.22.19
PWD=/app
PORT=5000
HOME=/root
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin      
NODE_VERSION=20.9.0
_=/usr/bin/printenv
root@9f96adc797bc:/app#
--------------------------------------------------------------------

docker container rm node-app -fv (also deletes associated volume)

docker-compose -f .\docker-compose.yml -f .\docker-compose.dev.yml up -d --build
docker exec -it node-app-mongo-1 bash 
mongosh -u "azam" -p "password"
    test> show dbs
    test> use mydb (creates new db)
    admin   100.00 KiB
    config   12.00 KiB
    local    72.00 KiB
    mydb
    test> db.books.insert({"name": "harry potter"})
    test> db.books.find()
docker-compose -f .\docker-compose.yml -f .\docker-compose.dev.yml down -v 
(not -v b/c it will delete mongo-db volume too)



we need mongoose package to connect our express app to mono db
PS D:\devops\5-CKA\node-app> npm install mongoose
https://www.npmjs.com/package/mongoose
configuration is written -> index.js
  PS D:\devops\5-CKA\node-app> docker logs node-app-node_app-1         

  > app@1.0.0 dev
  > nodemon -L index.js

  [nodemon] 3.0.1
  [nodemon] to restart at any time, enter `rs`
  [nodemon] watching path(s): *.*
  [nodemon] watching extensions: js,mjs,cjs,json
  [nodemon] starting `node index.js`
  listening on port 5000
  successfully connected to DB
docker exec -it node-app-node_app-1 bash
First, we need to update the local repository of our Docker Ubuntu container.
apt-get update
Then install the ping command. It comes with the iputils-ping package.
apt-get install iputils-ping
ping mongo

keeping variables in separate file :
module.exports = {
    MONGO_IP: process.env.MONGO_IP || "mongo",
    MONGO_PORT: process.env.MONGO_PORT || 27017,
    MONGO_USER: process.env.MONGO_USER,
    MONGO_PASSWORD: process.env.MONGO_PASSWORD,
};



mongoose
    .connect(mongoURL, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useFindAndModify: false
    })

    three settings to remove unwanted mongo warnings


build reties in the application
const connect WithRetry = () => {
mongoose
    .connect(mongoURL)
    .then(() => console.log("successfully connected to DB"))
    .catch((e) => {
        console.log(e)
        setTimeout(connectWithRetry, 5000) 5 seconds
    });
}


flag to NOT start dependent services yet

PS D:\devops\5-CKA\node-app> docker-compose -f .\docker-compose.yml \
-f .\docker-compose.dev.yml up -d --build --no-deps node_app

[+] Running 2/2
 ✔ Network node-app_default       Created                0.1s 
 ✔ Container node-app-node_app-1  Started                0.6s 

const connectWithRetry = () => {
mongoose
    .connect(mongoURL)
    .then(() => console.log("successfully connected to DB"))
    .catch((e) => {
        console.log(e)
        setTimeout(connectWithRetry, 5000)
    });
}
connectWithRetry()